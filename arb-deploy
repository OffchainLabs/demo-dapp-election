#!/usr/bin/env python
### ----------------------------------------------------------------------------
### arb-deploy
### ----------------------------------------------------------------------------

import argparse
import os
import subprocess
import sys

PROG='Arbitrum Deploy'
__version__ = 'Alpha'

DOCKER_COMPOSE_FILENAME='arb-docker-compose.yml'
VALIDATOR_STATE_DIRNAME='validator-states/validator'

### ----------------------------------------------------------------------------
### docker-compose template
### ----------------------------------------------------------------------------

# Parameters: mnemonic, number of validators, gas per wallet, gas limit, verbose,
# absolute path to state folder, absolute path to contract
COMPOSE_HEADER=(
"""# Machine generated by `arb-deploy`. Do not version control.
version: '3'
services:
    arb-ethbridge:
        image: arb-ethbridge
        build:
#           context: https://github.com/OffchainLabs/arb-ethbridge.git#alpha
            context: ./compose/arb-ethbridge
            args:
                MNEMONIC: '%s'
                NUM_WALLETS: %d
                GAS_PER_WALLET: %d
                GAS_LIMIT: %d
                VERBOSE: '%s'
                PORT: 7545
                CANARY_PORT: 17545
        ports:
            - '7545:7545'
            - '17545:17545'

    arb-validator-coordinator:
        depends_on:
            - arb-ethbridge
        volumes:
            - %s:/home/user/state
            - %s:/home/user/contract.ao
        image: arb-validator
        build:
#           context: https://github.com/OffchainLabs/arb-validator.git#alpha
            context: ./compose/arb-validator
            args:
                WAIT_FOR: 'arb-ethbridge:17545'
                ETH_URL: 'ws://arb-ethbridge:7545'
                ID: 0
        ports:
            - '1235:1235'
            - '1236:1236'
""")

def compose_header(mnemonic, num_validators, gas_per_wallet, gas_limit, verbose,
    state_abspath, contract_abspath):
    return (COMPOSE_HEADER % (mnemonic, num_validators, gas_per_wallet,
        gas_limit, verbose, state_abspath, contract_abspath))

# Parameters: validator id, absolute path to state folder,
# absolute path to contract, validator id
COMPOSE_VALIDATOR=(
"""
    arb-validator%d:
        depends_on:
            - arb-validator-coordinator
        volumes:
            - %s:/home/user/state
            - %s:/home/user/contract.ao
        image: arb-validator
        environment:
            WAIT_FOR: 'arb-validator-coordinator:1236'
            ETH_URL: 'ws://arb-ethbridge:7545'
            COORDINATOR_URL: 'wss://arb-validator-coordinator:1236/ws'
            ID: %d

""")

# Returns one arb-validator declaration for a docker compose file
def compose_validator(validator_id, state_abspath, contract_abspath):
    return (COMPOSE_VALIDATOR % (validator_id, state_abspath, contract_abspath,
        validator_id))

### ----------------------------------------------------------------------------
### Deploy
### ----------------------------------------------------------------------------

# Compile contracts to `contract.ao` and export to Docker and run validators
def deploy(contract_name, n_validators, mnemonic, verbose, gas_per_wallet,
    gas_limit):
    # Check for compose folder and get dependencies
    if not os.path.isdir('compose'):
        run('mkdir compose')
        run('git clone https://github.com/OffchainLabs/arb-ethbridge.git ./compose/arb-ethbridge')
        run('git clone https://github.com/OffchainLabs/arb-validator.git ./compose/arb-validator')
        run('git clone https://github.com/OffchainLabs/arb-avm.git ./compose/arb-validator/arb-avm')

    # Create VALIDATOR_STATE_DIRNAME s if they don't exist
    states_path = os.path.abspath(VALIDATOR_STATE_DIRNAME)
    for i in range(n_validators):
        if not os.path.isdir(VALIDATOR_STATE_DIRNAME + str(i)):
            os.makedirs(states_path + str(i))

    # Check for DOCKER_COMPOSE_FILENAME and halt if running
    compose = os.path.abspath('./' + DOCKER_COMPOSE_FILENAME)
    if os.path.isfile(compose):
        run('sudo docker-compose -f %s down' % compose)

    # Overwrite DOCKER_COMPOSE_FILENAME
    contract = os.path.abspath(contract_name)
    contents = (compose_header(mnemonic, n_validators, gas_per_wallet, gas_limit, verbose, states_path + str(0), contract) +
        ''.join([compose_validator(i, states_path + str(i), contract) for i in range(1, n_validators)]))
    with open(compose, 'w') as f:
        f.write(contents)

    # Build and run
    run('sudo docker-compose -f %s build' % compose)
    run('sudo docker-compose -f %s up' % compose)

# Run commands in shell
def run(command):
    BOLD='\033[1m'
    END='\033[0m'
    print(BOLD + '$ %s\n' % command + END)
    subprocess.call(command.split())

### ----------------------------------------------------------------------------
### Command line interface
### ----------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser(
        prog=PROG,
        description='Deploy an Arbitrum contract')
    # Required
    parser.add_argument('contract',
        help='The Arbitrum bytecode contract to deploy.')
    parser.add_argument('n_validators', type=int,
        help='The number of validators to deploy.')
    # Optional
    parser.add_argument('-l', '--gasLimit', type=int,
        dest='gas_limit', default=6721975,
        help='The block gas limit in wei [ganache-cli parameter]')
    parser.add_argument('-e', '--defaultBalanceEther', type=int,
        dest='gas_per_wallet', default=100,
        help='Amount of ether to assign each test account [ganache-cli parameter]')
    parser.add_argument('-m', '--mnemonic', type=str, dest='mnemonic',
        default='jar deny prosper gasp flush glass core corn alarm treat leg smart',
        help='Specify the Mnemonic to use (make sure to use "quotes")')
    parser.add_argument('-v', '--verbose', dest='verbose', action='count')
    parser.add_argument('--version', dest='version', action='version',
        version='%(prog)s ' + __version__)
    args = parser.parse_args()

    # Set verbose to Ganache parameter
    verboseFlag = '-q'
    if args.verbose is not None:
        if args.verbose == 1:
            verboseFlag = ''
        elif args.verbose == 2:
            verboseFlag = '-v'
        elif args.verbose > 2:
            verboseFlag = '-v --debug'

    # Deploy
    deploy(args.contract, args.n_validators, args.mnemonic, verboseFlag,
        args.gas_per_wallet, args.gas_limit)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)

